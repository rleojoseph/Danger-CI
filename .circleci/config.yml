version: 2.1

orbs:
  node: circleci/node@4.7.0
  gh: circleci/github-cli@1.0.4
  macos: circleci/macos@2
  ruby: circleci/ruby@1.2.0
  
container_medium: &container_medium
  macos:
    xcode: 14.2.0
  
jobs:
  danger_job:
    <<: *container_medium
    steps:
      - checkout
      - run:
          name: Install Rosetta
          command: softwareupdate --install-rosetta --agree-to-license
      # - run:
      #     name: Bundle Install Step
      #     command: bundle install 
      - run:
          name: Install Danger-Swift
          command: brew install danger/tap/danger-swift
      - run:
          name: Which Danger
          command: 'which danger-swift'
      - run:
          name: Danger Version
          command: 'danger --version'          
      - run:
          name: Danger Swift Version
          command: 'danger-swift --version'
      - run:
          name: Danger Token Check
          command: |
            if [ -n "$DANGER_GITHUB_API_TOKEN" ]; then
              echo "Running danger"
            else
              echo "Not running danger because $DANGER_GITHUB_API_TOKEN is not found"
            fi          
      - run:
          name: Run Danger CI
          command: 'danger-swift ci --verbose'

  determine_test_plan:
    <<: *container_medium
    steps:
      - checkout
      - run:
          name: Determine Test Plan
          command: |
            # CircleCI provides the branch we are comparing against as CIRCLE_BRANCH.
            BASE_BRANCH="origin/$CIRCLE_BRANCH"
            
            # Get the default branch to compare (typically main or master)
            DEFAULT_BRANCH=$(git rev-parse --abbrev-ref origin/HEAD)
            echo "Default branch: $DEFAULT_BRANCH"

            # Get the list of changed files between the current branch and the default branch
            CHANGED_FILES=$(git diff --name-only $DEFAULT_BRANCH...HEAD)
            echo "Changed files: $CHANGED_FILES"

            mkdir -p testing
            TEMP_FILE=$(mktemp)
            
            if echo "$CHANGED_FILES" | grep -qE "^(Demo/Demo/)"; then
              echo "Including Tests for source"
              echo "export SOURCE_TESTS=true" >> "$TEMP_FILE"
            fi

            if echo "$CHANGED_FILES" | grep -qE "^(Demo/DemoTests/)"; then
              echo "Including Tests"
              echo "export TESTS=true" >> "$TEMP_FILE"
            fi

            if ! echo "$CHANGED_FILES" | grep -qE "^(Demo/Demo/|Demo/DemoTests/)"; then
              echo "Including all tests"
              echo "export SOURCE_TESTS=true" >> "$TEMP_FILE"
              echo "export TESTS=true" >> "$TEMP_FILE"
            fi
            sort -u "$TEMP_FILE" > testing/test_plan_params.sh
            cat testing/test_plan_params.sh
            rm "$TEMP_FILE"
      - persist_to_workspace:
          root: .
          paths:
            - testing/test_plan_params.sh

workflows:
  version: 2.1
  build-and-release-workflow:
    jobs:
      - danger_job
      - determine_test_plan